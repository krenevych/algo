"""
Реалізуйте швидкий алгоритм сортування QuickSort.
"""

N = 1_000_000  # Кількість елементів масиву.
# Використовується у головній програмі для генерування масиву з випадкових чисел
# Для повільних алгоритмів сортування з асимптотикою n**2 рекомендується
# використовувати значення не більше 10к
# Для швидких алгоритмів сортування з асимптотикою
# nlog(n) встановіть значення 1 000 000


def qsort(array, a, b):
    if a >= b: return  # якщо фрагмент масиву, що треба відсортувати складається з одного елементу або порожній, то фрагмент вже відсортований

    l = a
    r = b
    pivot = array[l + (r - l) // 2]
    while True:
        while array[l] < pivot: l += 1
        while array[r] > pivot: r -= 1
        if l >= r: break
        array[l], array[r] = array[r], array[l]
        l += 1
        r -= 1

    qsort(array, a, r)
    qsort(array, r + 1, b)



def sort(array):
    """ Сортування масиву
    :param array: Вхідний масив даних, що треба відсортувати.
    """
    qsort(array, 0, len(array) - 1)


if __name__ == '__main__':
    # arr = [33, 12, 66, 20, 56, 95, 32, 13, 10]
    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]
    sort(arr)
    pass